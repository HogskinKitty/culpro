---
description: 
globs: 
alwaysApply: true
---
# 项目结构规范

## 目录结构

本项目采用以下标准目录结构组织代码和文档：

```
culpro/
├── docs/                    # 文档目录
│   ├── .vitepress/          # VitePress 配置
│   │   ├── config.ts        # 主配置文件
│   │   ├── navbar.ts        # 导航栏配置
│   │   ├── sidebar.ts       # 侧边栏配置
│   │   └── theme/           # 主题相关配置
│   ├── public/              # 静态资源
│   ├── java/                # Java 相关文档
│   ├── middleware/          # 中间件相关文档
│   │   ├── redis/           # Redis 文档
│   │   ├── rabbitmq/        # RabbitMQ 文档
│   │   ├── kafka/           # Kafka 文档
│   │   └── elasticsearch/   # ElasticSearch 文档
│   ├── database/            # 数据库相关文档
│   ├── devops/              # DevOps 相关文档
│   ├── ai-llm/              # AI/LLM 相关文档
│   └── index.md             # 文档首页
├── d2-diagrams/             # 系统架构图和流程图
├── .github/                 # GitHub 相关配置
│   └── workflows/           # GitHub Actions 工作流
├── node_modules/            # 依赖包
├── .cursor/                 # Cursor 编辑器配置
│   └── rules/               # 规则文件
│       ├── 01-role.mdc      # 角色定义
│       ├── 02.project_structure.mdc # 项目结构规范
│       └── 03.markdown_format.mdc # Markdown 格式规范
├── package.json             # 项目配置
├── pnpm-lock.yaml           # 依赖锁定文件
└── README.md                # 项目说明
```

## 文档组织规范

### 文档命名

#### 一般命名规则
- 文档文件名必须使用小写字母
- 单词之间必须使用连字符（`-`）分隔，不允许使用下划线或空格
- 文件名应简洁明了，能够清晰表达文档内容
- 文件名长度建议不超过 30 个字符
- 所有文档必须使用 `.md` 作为文件扩展名

#### 特定类型文档命名规则
1. **基础概念文档**：
   - 使用 `what-is-xxx.md` 格式（如 `what-is-rabbitmq.md`）
   - 介绍类文档可使用 `intro-to-xxx.md` 格式（如 `intro-to-spring.md`）

2. **安装部署文档**：
   - 单一安装文档统一使用 `install-xxx.md` 命名，其中 xxx 代表需要安装的某种工具或软件等
   - 按平台分类时使用 `install-xxx-yyy.md`，其中xxx 代表某种工具或软件等，yyy 则是平台（如 `install-docker-mac.md`） 

3. **功能特性文档**：
   - 使用 `feature-name.md` 格式（如 `message-routing.md`）
   - 复杂特性可使用 `feature-name-detail.md` 格式（如 `transaction-management-detail.md`）

4. **最佳实践文档**：
   - 统一使用 `best-practices.md` 或 `best-practices-xxx.md` 格式（如 `best-practices-caching.md`）

5. **教程类文档**：
   - 使用 `guide-to-xxx.md` 或 `tutorial-xxx.md` 格式（如 `guide-to-microservices.md`）
   - 系列教程使用 `01-xxx-yyy.md`、`02-xxx-zzz.md` 格式（如 `01-spring-setup.md`）

6. **API文档**：
   - 使用 `api-reference.md` 或 `api-xxx.md` 格式（如 `api-authentication.md`）

7. **故障排查文档**：
   - 使用 `troubleshooting.md` 或 `troubleshooting-xxx.md` 格式（如 `troubleshooting-connection.md`）

8. **索引文件**：
   - 目录主页统一使用 `index.md` 命名
   - 类别总览使用 `overview.md` 命名

#### 禁止的命名方式
- 不允许使用中文或特殊字符命名文件
- 不允许使用大写字母（包括首字母大写）
- 不允许使用数字开头（除非是有序教程系列）
- 不允许使用无意义的文件名（如 `doc1.md`、`temp.md`）
- 不允许在文件名中包含空格

#### 文档重命名规则
- 在重命名文档时，必须同时更新所有引用该文档的链接
- 必须在 `sidebar.ts` 和 `navbar.ts` 中更新相应的路径引用

### 文档分类

1. **核心技术文档**
   - 按照技术领域分类（java、middleware 等）
   - 每个领域下按照具体技术再次分类

2. **架构设计文档**
   - 系统架构图存放在 `d2-diagrams` 目录
   - 使用 D2 语法编写架构图
   - 每个图表文件对应一个系统或模块

3. **教程和指南**
   - 按照难度或主题分类
   - 使用序号标识学习顺序（如 `01-基础概念.md`）

## 导航与侧边栏规范

### 导航栏规范

- 顶级分类保持与 `navbar.ts` 中定义的结构一致
- 导航栏结构应反映主要技术领域分类
- 每个导航项对应文档目录下的一个主要分类目录
- 二级导航项应尽量保持精简，避免过多嵌套

### 侧边栏规范

- 侧边栏分组应与文档的逻辑章节对应
- 侧边栏结构在 `sidebar.ts` 中配置
- 每个技术领域需创建独立的侧边栏函数（如 `sidebarJava()`）
- 侧边栏分组推荐使用以下标准分类：
  1. 简介/概述
  2. 安装/快速开始
  3. 基础概念
  4. 核心功能
  5. 进阶特性
  6. 最佳实践
  7. 故障排查/常见问题

### 文档与导航的关联规则

- 每新增一个文档目录，需在 `sidebar.ts` 中添加相应的侧边栏配置
- 每新增一个主要技术分类，需在 `navbar.ts` 中添加相应的导航项
- 文档路径必须与侧边栏中的链接路径匹配
- 主要技术领域需在 `sidebar.ts` 的顶部定义基础路径

### 新增文档操作规范

新增文档时，请遵循以下操作步骤：

1. 确定文档所属的技术领域和分类
2. 在对应目录下创建文档文件，遵循文件命名规范
3. 编写文档内容，遵循 Markdown 格式规范
4. 检查 `sidebar.ts` 是否已包含该文档的侧边栏配置
   - 如果没有，添加相应的侧边栏项
   - 如需新增侧边栏分组，在对应的 `sidebarXXX()` 函数中添加
5. 如果是新技术领域：
   - 在 `sidebar.ts` 中创建新的侧边栏函数
   - 在顶部的 `sidebar` 对象中添加新的路径配置，如：
   - 在 `navbar.ts` 中添加新的导航项
6. 提交更改前进行本地预览，确保导航和文档正确关联

## 内容组织规则

### 章节划分

- 每个技术领域创建独立目录
- 相关内容应当放在同一目录下
- 目录深度不宜超过 2 层
- 每个技术主题下的文档按照以下顺序组织：
  1. 概述和基础
  2. 核心功能
  3. 高级特性
  4. 最佳实践
  5. 故障排查

### 索引文件

- 索引文件应包含当前目录下所有文档的链接及简要描述
- 使用卡片或列表形式组织内容入口
- 路径根目录使用 `/` 表示，如 `'/middleware/redis/'` 对应 `index.md`

## 图表和资源

### 图表存放

- 技术架构图存放在 `d2-diagrams` 目录
- 文档插图存放在 `docs/public/images` 目录
- 图片按照技术领域分子目录

### 资源命名

- 图片文件名应清晰描述内容
- 使用小写字母和连字符命名
- 包含版本号的资源应在文件名中标明版本

## 版本控制

- 文档应遵循语义化版本管理
- 重要版本应添加 Git 标签
- 主要更新应记录在 Changelog 中

## 规范检查

- 使用 markdownlint 检查文档格式
- 使用 Git Hooks 在提交前自动检查规范
- CI/CD 流程中包含文档构建和规范检查
- 定期检查文档路径与导航/侧边栏配置的一致性

#### 目录命名规则
- 目录名必须使用小写字母
- 多个单词之间必须使用连字符（`-`）分隔，不允许使用下划线或空格
- 目录名应该简洁明了，能够清晰表达目录内容的分类
- 一级目录应反映主要技术领域或功能模块（如 `java`、`middleware`）
- 二级目录应反映具体的技术或子领域（如 `middleware/redis`）
- 不允许使用版本号作为目录名（应在文档内容中区分版本）
- 不允许使用无意义的目录名（如 `docs1`、`temp`）

#### 配置文件命名规则
- 配置文件必须使用标准命名（如 `.gitignore`、`package.json`）
- 自定义配置文件应使用清晰的命名表达用途（如 `api-config.js`）
- 配置文件名中的单词应使用连字符（`-`）分隔
- 特定框架的配置文件应遵循其官方命名规范（如 `.vitepress/config.ts`）
