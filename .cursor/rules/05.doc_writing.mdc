---
description: 
globs: 
alwaysApply: true
---
# 文档书写规范

## 文档结构规范

### 基础结构模板

每篇技术文档应当包含以下基本结构：

```markdown
# 文档标题

## 简介
[简短概述，介绍本文档的主要内容和目的]

## 基本概念
[核心概念解释，帮助读者理解后续内容]

## 主要内容
[文档的主体部分，可根据实际内容划分多个二级或三级标题]

## 最佳实践
[推荐的使用方法和实践经验]

## 常见问题
[常见的问题和解决方案]

## 参考资料
[相关资料和参考链接]
```

### 技术组件文档结构

对于技术组件（如中间件、框架等）的文档，建议使用以下结构：

```markdown
# 组件名称

## 简介
[组件简介和核心功能]

## 安装与配置
[安装步骤和基础配置]

## 核心功能
[主要功能详细说明]

## API参考
[API详细说明]

## 示例
[代码示例和使用场景]

## 最佳实践
[使用建议和优化方案]

## 常见问题
[FAQ和故障排除]
```

## 内容撰写规范

### 内容长度控制

1. **总体字数限制**：
   - 单篇文档总字数建议控制在 3000-5000 字以内
   - 超过 5000 字的文档应拆分为多个子文档
   - 每个子文档应保持相对独立性和完整性

2. **章节长度控制**：
   - 每个主要章节（二级标题）建议控制在 800-1200 字
   - 每个子章节（三级标题）建议控制在 300-500 字
   - 单个段落建议控制在 100-200 字

3. **内容拆分原则**：
   - 按功能模块拆分：将不同功能模块的内容拆分为独立文档
   - 按复杂度拆分：将复杂主题拆分为基础篇和进阶篇
   - 按使用场景拆分：根据不同的使用场景分别编写文档

4. **文档关联**：
   - 拆分后的文档之间应建立清晰的关联关系
   - 使用文档链接互相引用
   - 在文档开头说明与其他文档的关系

### 语言风格

1. **技术准确性**：确保技术术语使用准确，避免歧义
2. **简洁明了**：使用简洁、直接的语言表达
3. **一致性**：同一概念在全文中使用相同的术语
4. **客观性**：保持客观中立的描述，避免主观评价
5. **实用性**：注重实用信息和解决方案的提供

### 段落组织

1. **主题集中**：每个段落只讨论一个主题
2. **逻辑顺序**：按照自然逻辑顺序组织内容（如时间顺序、重要性顺序等）
3. **过渡自然**：段落间应有自然的过渡
4. **篇幅适中**：避免过长的段落，通常一个段落不超过 5-7 行

### 图文结合

1. **适当配图**：对于复杂概念，应配以图表说明
2. **图表自明**：图表应有清晰的标题和必要的说明
3. **文字说明**：图表后应有相应的文字解释
4. **图表编号**：多图表情况下应有序号，便于引用

## 代码示例规范

### 代码格式

1. **完整性**：示例代码应当是完整可运行的
2. **简洁性**：移除无关代码，突出核心逻辑
3. **注释**：关键步骤应有注释说明
4. **缩进**：保持一致的缩进风格
5. **语法高亮**：使用对应语言的语法高亮

### Java 代码示例

Java 代码示例应遵循以下规范：

```java
/**
 * 类注释说明该类的用途
 */
public class Example {
    // 常量命名使用全大写下划线风格
    private static final String CONSTANT_VALUE = "example";
    
    /**
     * 方法注释说明该方法的作用
     *
     * @param param 参数说明
     * @return 返回值说明
     */
    public String doSomething(String param) {
        // 关键步骤注释
        if (param == null) {
            return CONSTANT_VALUE;
        }
        
        // 使用一致的缩进和括号风格
        return param.isEmpty()
            ? CONSTANT_VALUE
            : param.toUpperCase();
    }
}
```

### 配置示例

配置文件示例应当清晰标明文件类型和路径：

```yaml
# application.yml
server:
  port: 8080
  
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/db
    username: user
    password: password
```

## 专业术语使用规范

### 术语一致性

1. **术语表**：维护项目术语表，统一术语翻译和使用
2. **首次出现**：专业术语首次出现时提供解释
3. **缩写使用**：缩写首次出现时给出全称
4. **术语突出**：重要术语可使用加粗或代码格式突出

### 专有名词规范

1. **产品名称**：严格使用官方产品名称的大小写和拼写
2. **技术名称**：遵循技术官方的命名方式
3. **版本号**：明确标注相关技术的版本号

## 示例与案例规范

### 示例分类

1. **基础示例**：展示基本用法和概念
2. **进阶示例**：展示高级特性和复杂场景
3. **整合示例**：展示与其他技术的整合方式

### 案例设计

1. **真实性**：基于真实场景设计案例
2. **完整性**：提供完整的解决方案
3. **渐进性**：从简单到复杂逐步展开
4. **问题驱动**：以解决实际问题为导向

### 示例结构

```markdown
### 示例：实现用户登录功能

**场景描述**：
[描述应用场景和要解决的问题]

**实现步骤**：
1. [步骤一]
2. [步骤二]
3. [步骤三]

**代码实现**：
```java
// 代码示例
```

**关键点说明**：
- [关键点一]
- [关键点二]

**运行结果**：
[预期结果或截图]
```

## 文档维护规范

### 版本管理

1. **更新日志**：维护文档的更新历史
2. **废弃标记**：对于废弃的内容，使用删除线并注明替代方案

### 定期审查

1. **技术检查**：检查技术内容的准确性和时效性
2. **链接检查**：检查文档内的链接是否有效
3. **示例验证**：验证代码示例是否能正常运行
4. **读者反馈**：收集和处理读者反馈

## 特定内容规范

### API 文档规范

API 文档应包含以下内容：

```markdown
### API 名称

**请求方式**：GET/POST/PUT/DELETE

**URL**：/api/resource

**请求参数**：

| 参数名 | 类型 | 必填 | 说明 |
| ----- | ---- | ---- | ---- |
| id    | Long | 是   | 资源ID |
| name  | String | 否 | 资源名称 |

**响应结果**：

```json
{
  "code": 200,
  "message": "success",
  "data": {
    "id": 1,
    "name": "示例"
  }
}
```

**错误码**：

| 错误码 | 说明 |
| ----- | ---- |
| 400   | 参数错误 |
| 404   | 资源不存在 |
```

### 架构文档规范

架构文档应包含以下内容：

1. **系统概述**：描述系统的整体功能和定位
2. **架构图**：提供系统架构的可视化表示
3. **组件说明**：描述各主要组件的职责和关系
4. **技术选型**：说明技术选型理由和优势
5. **数据流**：描述系统中的数据流转
6. **部署架构**：说明系统的部署方式
7. **扩展点**：说明系统的扩展机制和方式

## 文档质量检查清单

文档发布前应检查以下项目：

- [ ] 文档结构完整，包含必要的章节
- [ ] 专业术语使用准确一致
- [ ] 代码示例完整可运行
- [ ] 图表清晰并有文字说明
- [ ] 无明显的语法和标点错误
- [ ] 格式统一，遵循 Markdown 规范
- [ ] 链接有效且指向正确的资源
- [ ] 版本信息明确
- [ ] 内容逻辑清晰，无明显矛盾
- [ ] 专有名词使用正确
